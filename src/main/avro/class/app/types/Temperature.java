/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package app.types;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Temperature extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1039577824281219159L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Temperature\",\"namespace\":\"app.types\",\"fields\":[{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"key\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"currenttime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"temp_last_changed_time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fahrenheit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"celcius\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"partition\",\"type\":\"int\"},{\"name\":\"offset\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String topic;
   private java.lang.String key;
   private java.lang.String currenttime;
   private java.lang.String temp_last_changed_time;
   private java.lang.String fahrenheit;
   private java.lang.String celcius;
   private int partition;
   private int offset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Temperature() {}

  /**
   * All-args constructor.
   * @param topic The new value for topic
   * @param key The new value for key
   * @param currenttime The new value for currenttime
   * @param temp_last_changed_time The new value for temp_last_changed_time
   * @param fahrenheit The new value for fahrenheit
   * @param celcius The new value for celcius
   * @param partition The new value for partition
   * @param offset The new value for offset
   */
  public Temperature(java.lang.String topic, java.lang.String key, java.lang.String currenttime, java.lang.String temp_last_changed_time, java.lang.String fahrenheit, java.lang.String celcius, java.lang.Integer partition, java.lang.Integer offset) {
    this.topic = topic;
    this.key = key;
    this.currenttime = currenttime;
    this.temp_last_changed_time = temp_last_changed_time;
    this.fahrenheit = fahrenheit;
    this.celcius = celcius;
    this.partition = partition;
    this.offset = offset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return topic;
    case 1: return key;
    case 2: return currenttime;
    case 3: return temp_last_changed_time;
    case 4: return fahrenheit;
    case 5: return celcius;
    case 6: return partition;
    case 7: return offset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: topic = (java.lang.String)value$; break;
    case 1: key = (java.lang.String)value$; break;
    case 2: currenttime = (java.lang.String)value$; break;
    case 3: temp_last_changed_time = (java.lang.String)value$; break;
    case 4: fahrenheit = (java.lang.String)value$; break;
    case 5: celcius = (java.lang.String)value$; break;
    case 6: partition = (java.lang.Integer)value$; break;
    case 7: offset = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.String getTopic() {
    return topic;
  }

  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.String value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'currenttime' field.
   * @return The value of the 'currenttime' field.
   */
  public java.lang.String getCurrenttime() {
    return currenttime;
  }

  /**
   * Sets the value of the 'currenttime' field.
   * @param value the value to set.
   */
  public void setCurrenttime(java.lang.String value) {
    this.currenttime = value;
  }

  /**
   * Gets the value of the 'temp_last_changed_time' field.
   * @return The value of the 'temp_last_changed_time' field.
   */
  public java.lang.String getTempLastChangedTime() {
    return temp_last_changed_time;
  }

  /**
   * Sets the value of the 'temp_last_changed_time' field.
   * @param value the value to set.
   */
  public void setTempLastChangedTime(java.lang.String value) {
    this.temp_last_changed_time = value;
  }

  /**
   * Gets the value of the 'fahrenheit' field.
   * @return The value of the 'fahrenheit' field.
   */
  public java.lang.String getFahrenheit() {
    return fahrenheit;
  }

  /**
   * Sets the value of the 'fahrenheit' field.
   * @param value the value to set.
   */
  public void setFahrenheit(java.lang.String value) {
    this.fahrenheit = value;
  }

  /**
   * Gets the value of the 'celcius' field.
   * @return The value of the 'celcius' field.
   */
  public java.lang.String getCelcius() {
    return celcius;
  }

  /**
   * Sets the value of the 'celcius' field.
   * @param value the value to set.
   */
  public void setCelcius(java.lang.String value) {
    this.celcius = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return The value of the 'partition' field.
   */
  public java.lang.Integer getPartition() {
    return partition;
  }

  /**
   * Sets the value of the 'partition' field.
   * @param value the value to set.
   */
  public void setPartition(java.lang.Integer value) {
    this.partition = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.Integer getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Integer value) {
    this.offset = value;
  }

  /**
   * Creates a new Temperature RecordBuilder.
   * @return A new Temperature RecordBuilder
   */
  public static app.types.Temperature.Builder newBuilder() {
    return new app.types.Temperature.Builder();
  }

  /**
   * Creates a new Temperature RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Temperature RecordBuilder
   */
  public static app.types.Temperature.Builder newBuilder(app.types.Temperature.Builder other) {
    return new app.types.Temperature.Builder(other);
  }

  /**
   * Creates a new Temperature RecordBuilder by copying an existing Temperature instance.
   * @param other The existing instance to copy.
   * @return A new Temperature RecordBuilder
   */
  public static app.types.Temperature.Builder newBuilder(app.types.Temperature other) {
    return new app.types.Temperature.Builder(other);
  }

  /**
   * RecordBuilder for Temperature instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Temperature>
    implements org.apache.avro.data.RecordBuilder<Temperature> {

    private java.lang.String topic;
    private java.lang.String key;
    private java.lang.String currenttime;
    private java.lang.String temp_last_changed_time;
    private java.lang.String fahrenheit;
    private java.lang.String celcius;
    private int partition;
    private int offset;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(app.types.Temperature.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currenttime)) {
        this.currenttime = data().deepCopy(fields()[2].schema(), other.currenttime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temp_last_changed_time)) {
        this.temp_last_changed_time = data().deepCopy(fields()[3].schema(), other.temp_last_changed_time);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fahrenheit)) {
        this.fahrenheit = data().deepCopy(fields()[4].schema(), other.fahrenheit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.celcius)) {
        this.celcius = data().deepCopy(fields()[5].schema(), other.celcius);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.partition)) {
        this.partition = data().deepCopy(fields()[6].schema(), other.partition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.offset)) {
        this.offset = data().deepCopy(fields()[7].schema(), other.offset);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Temperature instance
     * @param other The existing instance to copy.
     */
    private Builder(app.types.Temperature other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key)) {
        this.key = data().deepCopy(fields()[1].schema(), other.key);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currenttime)) {
        this.currenttime = data().deepCopy(fields()[2].schema(), other.currenttime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temp_last_changed_time)) {
        this.temp_last_changed_time = data().deepCopy(fields()[3].schema(), other.temp_last_changed_time);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fahrenheit)) {
        this.fahrenheit = data().deepCopy(fields()[4].schema(), other.fahrenheit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.celcius)) {
        this.celcius = data().deepCopy(fields()[5].schema(), other.celcius);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.partition)) {
        this.partition = data().deepCopy(fields()[6].schema(), other.partition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.offset)) {
        this.offset = data().deepCopy(fields()[7].schema(), other.offset);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.String getTopic() {
      return topic;
    }

    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setTopic(java.lang.String value) {
      validate(fields()[0], value);
      this.topic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setKey(java.lang.String value) {
      validate(fields()[1], value);
      this.key = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearKey() {
      key = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currenttime' field.
      * @return The value.
      */
    public java.lang.String getCurrenttime() {
      return currenttime;
    }

    /**
      * Sets the value of the 'currenttime' field.
      * @param value The value of 'currenttime'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setCurrenttime(java.lang.String value) {
      validate(fields()[2], value);
      this.currenttime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currenttime' field has been set.
      * @return True if the 'currenttime' field has been set, false otherwise.
      */
    public boolean hasCurrenttime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currenttime' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearCurrenttime() {
      currenttime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp_last_changed_time' field.
      * @return The value.
      */
    public java.lang.String getTempLastChangedTime() {
      return temp_last_changed_time;
    }

    /**
      * Sets the value of the 'temp_last_changed_time' field.
      * @param value The value of 'temp_last_changed_time'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setTempLastChangedTime(java.lang.String value) {
      validate(fields()[3], value);
      this.temp_last_changed_time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'temp_last_changed_time' field has been set.
      * @return True if the 'temp_last_changed_time' field has been set, false otherwise.
      */
    public boolean hasTempLastChangedTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'temp_last_changed_time' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearTempLastChangedTime() {
      temp_last_changed_time = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'fahrenheit' field.
      * @return The value.
      */
    public java.lang.String getFahrenheit() {
      return fahrenheit;
    }

    /**
      * Sets the value of the 'fahrenheit' field.
      * @param value The value of 'fahrenheit'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setFahrenheit(java.lang.String value) {
      validate(fields()[4], value);
      this.fahrenheit = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'fahrenheit' field has been set.
      * @return True if the 'fahrenheit' field has been set, false otherwise.
      */
    public boolean hasFahrenheit() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'fahrenheit' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearFahrenheit() {
      fahrenheit = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'celcius' field.
      * @return The value.
      */
    public java.lang.String getCelcius() {
      return celcius;
    }

    /**
      * Sets the value of the 'celcius' field.
      * @param value The value of 'celcius'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setCelcius(java.lang.String value) {
      validate(fields()[5], value);
      this.celcius = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'celcius' field has been set.
      * @return True if the 'celcius' field has been set, false otherwise.
      */
    public boolean hasCelcius() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'celcius' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearCelcius() {
      celcius = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * @return The value.
      */
    public java.lang.Integer getPartition() {
      return partition;
    }

    /**
      * Sets the value of the 'partition' field.
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setPartition(int value) {
      validate(fields()[6], value);
      this.partition = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'partition' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearPartition() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.Integer getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public app.types.Temperature.Builder setOffset(int value) {
      validate(fields()[7], value);
      this.offset = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public app.types.Temperature.Builder clearOffset() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Temperature build() {
      try {
        Temperature record = new Temperature();
        record.topic = fieldSetFlags()[0] ? this.topic : (java.lang.String) defaultValue(fields()[0]);
        record.key = fieldSetFlags()[1] ? this.key : (java.lang.String) defaultValue(fields()[1]);
        record.currenttime = fieldSetFlags()[2] ? this.currenttime : (java.lang.String) defaultValue(fields()[2]);
        record.temp_last_changed_time = fieldSetFlags()[3] ? this.temp_last_changed_time : (java.lang.String) defaultValue(fields()[3]);
        record.fahrenheit = fieldSetFlags()[4] ? this.fahrenheit : (java.lang.String) defaultValue(fields()[4]);
        record.celcius = fieldSetFlags()[5] ? this.celcius : (java.lang.String) defaultValue(fields()[5]);
        record.partition = fieldSetFlags()[6] ? this.partition : (java.lang.Integer) defaultValue(fields()[6]);
        record.offset = fieldSetFlags()[7] ? this.offset : (java.lang.Integer) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
